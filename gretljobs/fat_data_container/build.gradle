description = """\n
Erstellt einen Docker Container mit der ÖREB-DB
inklusive sämtlicher notwendiger Daten.
"""

apply plugin: "com.bmuschko.docker-remote-api"
apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

import java.text.SimpleDateFormat
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer.ExposedPort
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerLogsContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.extras.DockerWaitHealthyContainer
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths

ext {
    pathToTempFolder = System.getProperty("java.io.tmpdir")

    federalLegalBasisBaseUrl = "http://models.geo.admin.ch/V_D/OeREB/"
    federalLegalBaseDataSet = "OeREBKRM_V1_1_Gesetze_20180501"

    cantonalLegalBasisBaseUrl = "https://geo.so.ch/geodata/ch.so.sk.gesetze.oereb/"
    cantonalLegalBaseDataSet = "ch.so.sk.gesetze"

    dbPort = "54321"
    dbUriOereb = "jdbc:postgresql://localhost:$dbPort/oereb"
    dbUserOereb = "admin"
    dbPwdOereb = "admin"
    dbSchema = "live"

    iliModelVorschriften = "OeREBKRMvs_V1_1"
    iliModelTransferstruktur = "OeREBKRMtrsfr_V1_1"

    //landUsePlansDataSets = ["2502", "2457", "2580"]
    //landUsePlansDataSets = ["2405", "2408", "2457", "2473", "2474", "2476", "2498", "2501", "2502", "2580", "2613", "2614", "2615"]
    landUsePlansDataSet = "ch.so.arp.nutzungsplanung.oereb"
    landUsePlansBaseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.arp.nutzungsplanung.oereb-dev/"
}

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}


task pullOerebDbDockerImage(type: DockerPullImage) {
    repository = "sogis/oereb-db"
    tag = "latest"
}

task createOerebDbDockerContainer(dependsOn: 'pullOerebDbDockerImage', type: DockerCreateContainer) {
    dependsOn 'removeOerebDbDockerContainer'
    description = "Create docker oereb database container."

    image = "sogis/oereb-db:latest"
    imageId = "oereb-db"
    containerName = "oereb-db"
    hostName = "primary"
    portBindings = ["$dbPort:5432"]
    exposedPorts = [new ExposedPort("tcp", [5432])]
    envVars.set(["PG_DATABASE": "oereb",
               "PG_LOCALE": "de_CH.UTF-8",
               "PG_PRIMARY_PORT": "5432",
               "PG_MODE": "primary",
               "PG_USER": "admin",
               "PG_PASSWORD": "admin",
               "PG_PRIMARY_USER": "repl",
               "PG_PRIMARY_PASSWORD": "repl",
               "PG_ROOT_PASSWORD": "secret",
               "PG_WRITE_USER": "gretl",
               "PG_WRITE_PASSWORD": "gretl",
               "PG_READ_USER": "ogc_server",
               "PG_READ_PASSWORD": "ogc_server"])
    binds = ["/tmp":"/pgdata"]
}

task removeOerebDbDockerContainer(type: DockerRemoveContainer) {
    description = "Remove existing docker oereb database container."
    removeVolumes = true
    force = true
    targetContainerId createOerebDbDockerContainer.containerName 

    onError { exception -> 
        println exception.message
    }
}

task startOerebDbDockerContainer(dependsOn: 'createOerebDbDockerContainer', type: DockerStartContainer) {	
    description = "Start docker oereb database container."
    targetContainerId createOerebDbDockerContainer.getContainerId()

    doLast {
        println "Wait for Database..."
        sleep(45000)
    }
    
    finalizedBy {
        //logDockerContainer
    }
}

task stopOerebDbDockerContainer(type: DockerStopContainer) {
    description = "Stop docker container."
    targetContainerId startOerebDbDockerContainer.getContainerId()
}

// task startAndWaitOnHealthyOerebDbContainer(dependsOn: 'startOerebDbDockerContainer', type: DockerWaitHealthyContainer) {
//     description = "Wait on healthy docker oereb database container."
//     targetContainerId createOerebDbDockerContainer.getContainerId()
//     awaitStatusTimeout = 120
//     checkInterval = 10000
// }

task downloadFederalLegalBasis(type: Download) {
    description = "Download Bundesgesetze ($federalLegalBaseDataSet)."
    src federalLegalBasisBaseUrl + federalLegalBaseDataSet + ".xml"
    dest pathToTempFolder
    overwrite true

    doLast {
        println "File downloaded to: " + pathToTempFolder
    }        
}

task importFederalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadFederalLegalBasis') {
    description = "Import Bundesgesetze ($federalLegalBaseDataSet)."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelVorschriften
    dbschema = dbSchema
    dataFile = file(Paths.get(pathToTempFolder.toString(), federalLegalBaseDataSet + ".xml"))
    dataset = "ch.admin.bk.gesetze" // Anderes (in diesem Fall beliebig) Dataset, da die dazugehörigen Daten nicht Bestandteil des Transfers (des exportierten Files) sein dürfen.
    disableValidation = true
}

task downloadCantonalLegalBasis(type: Download) {
    description = "Download kantonale Gesetze ($cantonalLegalBaseDataSet)."
    src cantonalLegalBasisBaseUrl + cantonalLegalBaseDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true

    doLast {
        println "File downloaded to: " + pathToTempFolder
    }        
}

task importCantonalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadCantonalLegalBasis') {
    description = "Import kantonale Gesetze"
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelVorschriften
    dbschema = dbSchema
    dataFile = file(Paths.get(pathToTempFolder.toString(), cantonalLegalBaseDataSet + ".xtf"))
    dataset = cantonalLegalBaseDataSet // Anderes (in diesem Fall beliebig) Dataset, da die dazugehörigen Daten nicht Bestandteil des Transfers (des exportierten Files) sein dürfen.
    disableValidation = true
}


task downloadLandUsePlansData(type: Download) {
    description = "Download NPL-ÖREB-Datensatz"
    src landUsePlansBaseUrl + landUsePlansDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true

    doLast {
        println "File downloaded to: " + pathToTempFolder
    }        
}


task replaceLandUsePlansData(type: Ili2pgReplace, dependsOn: downloadLandUsePlansData) {
    description = "Import NPL-ÖREB-Datensatz"
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelTransferstruktur
    dbschema = dbSchema
    dataFile = file(Paths.get(pathToTempFolder.toString(), landUsePlansDataSet + ".xtf"))
    dataset = landUsePlansDataSet
    disableValidation = true

    doLast {
        println "Data imported into db: " + dbUriOereb
    }  
}        

task importDataToOerebDb() {
    description = "Import alle notwendigen Daten."

    dependsOn startOerebDbDockerContainer
    dependsOn importFederalLegalBasisToOereb
    dependsOn importCantonalLegalBasisToOereb
    dependsOn replaceLandUsePlansData
    dependsOn stopOerebDbDockerContainer

    importFederalLegalBasisToOereb.mustRunAfter(startOerebDbDockerContainer)
    importCantonalLegalBasisToOereb.mustRunAfter(importFederalLegalBasisToOereb)
    replaceLandUsePlansData.mustRunAfter(importCantonalLegalBasisToOereb)
    stopOerebDbDockerContainer.mustRunAfter(replaceLandUsePlansData)
}

task copyOerebDbDataDirectory(type: Copy) {
    from '/tmp/primary'
    into './primary'
}